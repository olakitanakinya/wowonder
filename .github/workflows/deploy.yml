name: Deploy Wowonder

concurrency:
  group: deploy-wowonder
  cancel-in-progress: true

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wowonder-laravel
  NAMESPACE: wowonder
  K8S_WORKER_IP: 44.220.139.238

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        kubectl config set-cluster kubernetes --server=https://54.159.42.214:6443 --insecure-skip-tls-verify=true
        kubectl get nodes

    - name: Cleanup previous deployment
      run: |
        echo "=== Cleaning previous deployment ==="
        kubectl delete deployment wowonder-app -n ${{ env.NAMESPACE }} --ignore-not-found=true
        kubectl delete service wowonder-service -n ${{ env.NAMESPACE }} --ignore-not-found=true
        kubectl delete all --all -n ${{ env.NAMESPACE }} --ignore-not-found=true
        kubectl delete pvc -n ${{ env.NAMESPACE }} --all --ignore-not-found=true
        kubectl delete namespace ${{ env.NAMESPACE }} --ignore-not-found=true
        sleep 10

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }}
        echo "Namespace ${{ env.NAMESPACE }} created"

    - name: Deploy storage
      run: |
        echo "=== Deploying Storage ==="
        kubectl apply -f k8s/storage.yaml
        sleep 10

    - name: Deploy MySQL
      run: |
        echo "=== Deploying MySQL ==="
        kubectl apply -f k8s/mysql.yaml
        kubectl wait --for=condition=ready pod -l app=mysql -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Initialize database
      run: |
        echo "=== Initializing Database ==="
        MYSQL_POD=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        
        # Wait for MySQL
        timeout 120s bash -c "
          while ! kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysqladmin ping -uroot -prootpassword --silent; do
            echo 'Waiting for MySQL...'
            sleep 10
          done
        "
        
        # Create database
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "CREATE DATABASE IF NOT EXISTS wowonderdb;"
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "CREATE USER IF NOT EXISTS 'wowonderuser'@'%' IDENTIFIED BY 'Password123@24';"
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "GRANT ALL PRIVILEGES ON wowonderdb.* TO 'wowonderuser'@'%';"
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "FLUSH PRIVILEGES;"
        
        echo "✅ Database initialized"

    - name: Create deployment file
      run: |
        echo "=== Creating Deployment File ==="
        mkdir -p k8s
        
        # Create the deployment file using echo commands
        echo "apiVersion: apps/v1" > k8s/deployment.yaml
        echo "kind: Deployment" >> k8s/deployment.yaml
        echo "metadata:" >> k8s/deployment.yaml
        echo "  name: wowonder-app" >> k8s/deployment.yaml
        echo "  namespace: ${{ env.NAMESPACE }}" >> k8s/deployment.yaml
        echo "  labels:" >> k8s/deployment.yaml
        echo "    app: wowonder-app" >> k8s/deployment.yaml
        echo "spec:" >> k8s/deployment.yaml
        echo "  replicas: 1" >> k8s/deployment.yaml
        echo "  selector:" >> k8s/deployment.yaml
        echo "    matchLabels:" >> k8s/deployment.yaml
        echo "      app: wowonder-app" >> k8s/deployment.yaml
        echo "  template:" >> k8s/deployment.yaml
        echo "    metadata:" >> k8s/deployment.yaml
        echo "      labels:" >> k8s/deployment.yaml
        echo "        app: wowonder-app" >> k8s/deployment.yaml
        echo "    spec:" >> k8s/deployment.yaml
        echo "      containers:" >> k8s/deployment.yaml
        echo "      - name: wowonder-app" >> k8s/deployment.yaml
        echo "        image: ${{ env.DOCKER_IMAGE }}:latest" >> k8s/deployment.yaml
        echo "        ports:" >> k8s/deployment.yaml
        echo "        - containerPort: 80" >> k8s/deployment.yaml
        echo "        env:" >> k8s/deployment.yaml
        echo "        - name: MYSQL_HOST" >> k8s/deployment.yaml
        echo "          value: \"mysql-service\"" >> k8s/deployment.yaml
        echo "        - name: MYSQL_DATABASE" >> k8s/deployment.yaml
        echo "          value: \"wowonderdb\"" >> k8s/deployment.yaml
        echo "        - name: MYSQL_USER" >> k8s/deployment.yaml
        echo "          value: \"wowonderuser\"" >> k8s/deployment.yaml
        echo "        - name: MYSQL_PASSWORD" >> k8s/deployment.yaml
        echo "          value: \"Password123@24\"" >> k8s/deployment.yaml
        echo "        resources:" >> k8s/deployment.yaml
        echo "          requests:" >> k8s/deployment.yaml
        echo "            memory: \"512Mi\"" >> k8s/deployment.yaml
        echo "            cpu: \"250m\"" >> k8s/deployment.yaml
        echo "          limits:" >> k8s/deployment.yaml
        echo "            memory: \"1Gi\"" >> k8s/deployment.yaml
        echo "            cpu: \"500m\"" >> k8s/deployment.yaml
        echo "        volumeMounts:" >> k8s/deployment.yaml
        echo "        - name: wowonder-data" >> k8s/deployment.yaml
        echo "          mountPath: /var/www/html/upload" >> k8s/deployment.yaml
        echo "        readinessProbe:" >> k8s/deployment.yaml
        echo "          httpGet:" >> k8s/deployment.yaml
        echo "            path: /" >> k8s/deployment.yaml
        echo "            port: 80" >> k8s/deployment.yaml
        echo "          initialDelaySeconds: 60" >> k8s/deployment.yaml
        echo "          periodSeconds: 15" >> k8s/deployment.yaml
        echo "        livenessProbe:" >> k8s/deployment.yaml
        echo "          httpGet:" >> k8s/deployment.yaml
        echo "            path: /" >> k8s/deployment.yaml
        echo "            port: 80" >> k8s/deployment.yaml
        echo "          initialDelaySeconds: 90" >> k8s/deployment.yaml
        echo "          periodSeconds: 30" >> k8s/deployment.yaml
        echo "      volumes:" >> k8s/deployment.yaml
        echo "      - name: wowonder-data" >> k8s/deployment.yaml
        echo "        persistentVolumeClaim:" >> k8s/deployment.yaml
        echo "          claimName: wowonder-pvc" >> k8s/deployment.yaml
        echo "---" >> k8s/deployment.yaml
        echo "apiVersion: v1" >> k8s/deployment.yaml
        echo "kind: Service" >> k8s/deployment.yaml
        echo "metadata:" >> k8s/deployment.yaml
        echo "  name: wowonder-service" >> k8s/deployment.yaml
        echo "  namespace: ${{ env.NAMESPACE }}" >> k8s/deployment.yaml
        echo "spec:" >> k8s/deployment.yaml
        echo "  type: NodePort" >> k8s/deployment.yaml
        echo "  selector:" >> k8s/deployment.yaml
        echo "    app: wowonder-app" >> k8s/deployment.yaml
        echo "  ports:" >> k8s/deployment.yaml
        echo "    - protocol: TCP" >> k8s/deployment.yaml
        echo "      port: 80" >> k8s/deployment.yaml
        echo "      targetPort: 80" >> k8s/deployment.yaml
        echo "      nodePort: 30080" >> k8s/deployment.yaml
        
        echo "✅ Deployment file created"

    - name: Deploy application
      run: |
        echo "=== Deploying Application ==="
        kubectl apply -f k8s/deployment.yaml
        kubectl wait --for=condition=available deployment/wowonder-app -n ${{ env.NAMESPACE }} --timeout=300s
        echo "✅ Application deployed"

    - name: Configure application
      run: |
        echo "=== Configuring Application ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        
        # Create config.php
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '<?php' > /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_host = \"mysql-service\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_user = \"wowonderuser\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_pass = \"Password123@24\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_name = \"wowonderdb\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$site_url = \"http://44.220.139.238:30080\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$auto_redirect = false;' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$purchase_code = \"000000\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$siteEncryptKey = \"eb733cdb4d769426e460bad9df6b824eee3416d7\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '?>' >> /var/www/html/config.php"
        
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chown www-data:www-data /var/www/html/config.php
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chmod 644 /var/www/html/config.php
        
        echo "✅ Application configured"

    - name: Verify deployment
      run: |
        echo "=== Verifying Deployment ==="
        kubectl get pods -n ${{ env.NAMESPACE }}
        echo "Application URL: http://${{ env.K8S_WORKER_IP }}:30080/"
        echo "✅ DEPLOYMENT COMPLETE"
