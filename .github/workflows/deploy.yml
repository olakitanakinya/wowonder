name: Deploy Wowonder
on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wowonder-laravel
  NAMESPACE: wowonder
  K8S_WORKER_IP: 44.220.139.238

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix config.php port
      run: |
        echo "=== Fixing config.php port ==="
        if [ -f "config.php" ]; then
          sed -i 's/:3008/:30080/g' config.php
          echo "Updated port from 3008 to 30080 in config.php"
        else
          echo "Creating config.php with correct port..."
          # Create a simple config.php file
          cat > config.php << 'EOF'
<?php
$sql_db_host = "mysql-service";
$sql_db_user = "wowonderuser";
$sql_db_pass = "Password123@24";
$sql_db_name = "wowonderdb";
$site_url = "http://44.220.139.238:30080";
$auto_redirect = true;
$purchase_code = "000000";
$siteEncryptKey = "eb733cdb4d769426e460bad9df6b824eee3416d7";
?>
EOF
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        kubectl config set-cluster kubernetes --server=https://54.159.42.214:6443 --insecure-skip-tls-verify=true
        kubectl get nodes

    - name: Cleanup previous deployment
      run: |
        kubectl delete all --all -n ${{ env.NAMESPACE }} --ignore-not-found=true
        kubectl delete pvc -n ${{ env.NAMESPACE }} --all --ignore-not-found=true
        kubectl delete namespace ${{ env.NAMESPACE }} --ignore-not-found=true
        sleep 10

    - name: Create namespace
      run: kubectl create namespace ${{ env.NAMESPACE }}

    - name: Deploy storage
      run: |
        kubectl apply -f k8s/storage.yaml
        sleep 5
        kubectl get pv,pvc -n ${{ env.NAMESPACE }}

    - name: Deploy MySQL
      run: |
        kubectl apply -f k8s/mysql.yaml
        echo "Waiting for MySQL..."
        sleep 30
        kubectl wait --for=condition=ready pod -l app=mysql -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Initialize database
      run: |
        MYSQL_POD=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o name)
        echo "MySQL pod: $MYSQL_POD"
        
        # Wait for MySQL to be ready
        until kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysqladmin ping -uroot -prootpassword --silent; do
          echo "Waiting for MySQL..."
          sleep 10
        done
        
        # Create database
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "
          CREATE DATABASE IF NOT EXISTS wowonderdb;
          CREATE USER IF NOT EXISTS 'wowonderuser'@'%' IDENTIFIED BY 'Password123@24';
          GRANT ALL PRIVILEGES ON wowonderdb.* TO 'wowonderuser'@'%';
          FLUSH PRIVILEGES;
        "
        
        # Import SQL if exists
        if [ -f "wowonderdb.sql" ]; then
          echo "Importing database..."
          kubectl cp wowonderdb.sql ${{ env.NAMESPACE }}/${MYSQL_POD#pod/}:/tmp/db.sql
          kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword wowonderdb < /tmp/db.sql
        fi

    - name: Deploy application
      run: |
        # Create a temporary file with the image replaced
        cat k8s/laravel.yaml | sed "s|\$DOCKER_IMAGE|${{ env.DOCKER_IMAGE }}|g" > k8s/laravel-deploy.yaml
        kubectl apply -f k8s/laravel-deploy.yaml
        kubectl wait --for=condition=ready pod -l app=wowonder-app -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Debug application
      run: |
        echo "=== Debugging Application ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o name)
        echo "App pod: $APP_POD"
        
        # Check logs
        kubectl logs -n ${{ env.NAMESPACE }} $APP_POD --tail=50
        
        # Check if config.php has correct port
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- cat /var/www/html/config.php | grep site_url || echo "Cannot read config.php"

    - name: Create config in pod
      run: |
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o name)
        
        # Create config.php using multiple commands to avoid heredoc issues
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '<?php' > /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_host = \"mysql-service\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_user = \"wowonderuser\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_pass = \"Password123@24\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$sql_db_name = \"wowonderdb\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$site_url = \"http://44.220.139.238:30080\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$auto_redirect = true;' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$purchase_code = \"000000\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '\$siteEncryptKey = \"eb733cdb4d769426e460bad9df6b824eee3416d7\";' >> /var/www/html/config.php"
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "echo '?>' >> /var/www/html/config.php"
        
        # Set permissions
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chown www-data:www-data /var/www/html/config.php
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chmod 644 /var/www/html/config.php

    - name: Test database connection
      run: |
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o name)
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- php -r "
        \$conn = new mysqli('mysql-service', 'wowonderuser', 'Password123@24', 'wowonderdb', 3306);
        if (\$conn->connect_error) {
            echo 'DATABASE ERROR: ' . \$conn->connect_error;
            exit(1);
        } else {
            echo 'DATABASE SUCCESS: Connected to MySQL';
            \$conn->close();
        }
        "

    - name: Test application
      run: |
        echo "Testing application..."
        sleep 20
        curl -s http://${{ env.K8S_WORKER_IP }}:30080/ > /dev/null && echo "✓ Application is responding" || echo "✗ Application not responding"
        curl -s http://${{ env.K8S_WORKER_IP }}:30080/welcome > /dev/null && echo "✓ Welcome page working" || echo "✗ Welcome page not working"

    - name: Show status
      run: |
        echo "=== Final Status ==="
        kubectl get all -n ${{ env.NAMESPACE }}
        echo ""
        echo "=== Application URL ==="
        echo "http://${{ env.K8S_WORKER_IP }}:30080"
