# ... [keep all the previous content until after "Create fixed config in pod" step] ...

    - name: Create fixed config in pod
      run: |
        echo "=== Creating Fixed Config in Pod ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o name 2>/dev/null || echo "NOT_FOUND")

        if [ "$APP_POD" != "NOT_FOUND" ]; then
          echo "Creating fixed config.php with correct port..."
          
          # Create config.php using a single command to avoid multiple exec calls
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "cat > /var/www/html/config.php << 'CONFIG_EOF'
<?php
// MySQL Hostname
\$sql_db_host = \"mysql-service\";
// MySQL Database User
\$sql_db_user = \"wowonderuser\";
// MySQL Database Password  
\$sql_db_pass = \"Password123@24\";
// MySQL Database Name
\$sql_db_name = \"wowonderdb\";
// Site URL - CORRECT PORT
\$site_url = \"http://44.220.139.238:30080\";
// Disable auto redirect to fix redirect loops
\$auto_redirect = false;
// Purchase code
\$purchase_code = \"000000\";
// Site encrypt key
\$siteEncryptKey = \"eb733cdb4d769426e460bad9df6b824eee3416d7\";
?>
CONFIG_EOF"

          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chown www-data:www-data /var/www/html/config.php
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chmod 644 /var/www/html/config.php

          echo "‚úì Configuration files updated with correct port and auto_redirect = false"
        else
          echo "‚ùå Cannot create config - application pod not found"
        fi

    # REMOVED THE PROBLEMATIC RESTART STEP - NO LONGER NEEDED

    - name: Verify deployment status
      run: |
        echo "=== Verifying Deployment Status ==="
        
        # Check deployment status
        echo "Deployment status:"
        kubectl get deployment wowonder-app -n ${{ env.NAMESPACE }} -o wide
        
        # Check pod status
        echo "Pod status:"
        kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o wide
        
        # Verify the pod is ready
        CURRENT_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        READY_STATUS=$(kubectl get pod $CURRENT_POD -n ${{ env.NAMESPACE }} -o jsonpath='{.status.containerStatuses[0].ready}')
        
        if [ "$READY_STATUS" = "true" ]; then
          echo "‚úÖ Pod $CURRENT_POD is ready and healthy"
        else
          echo "‚ùå Pod $CURRENT_POD is not ready"
          exit 1
        fi

    - name: Test database connection from app
      run: |
        echo "=== Testing Database Connection from Application ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "NOT_FOUND")

        if [ "$APP_POD" != "NOT_FOUND" ]; then
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- php -r "\
          \$conn = new mysqli('mysql-service', 'wowonderuser', 'Password123@24', 'wowonderdb', 3306);\
          if (\$conn->connect_error) {\
              echo '‚ùå DATABASE ERROR: ' . \$conn->connect_error;\
              exit(1);\
          } else {\
              echo '‚úì DATABASE SUCCESS: Connected to MySQL';\
              \$result = \$conn->query('SHOW TABLES');\
              if (\$result && \$result->num_rows > 0) {\
                  echo '‚úì Database has tables: ' . \$result->num_rows;\
              } else {\
                  echo '‚ö† Database is empty or tables query failed';\
              }\
              \$conn->close();\
          }\
          " || echo "Database test completed"
        else
          echo "‚ùå Cannot test database - application pod not found"
        fi

    - name: Final application test
      run: |
        echo "=== Final Application Test ==="
        echo "Waiting for application to be fully ready..."
        sleep 30

        echo "--- Testing Application ---"
        
        # Test if the application is responding
        echo "Testing main application:"
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.K8S_WORKER_IP }}:30080/ || echo "000")
        echo "HTTP Response Code: $HTTP_CODE"
        
        # Test welcome page directly
        echo "Testing welcome page:"
        WELCOME_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.K8S_WORKER_IP }}:30080/welcome || echo "000")
        echo "Welcome Page Code: $WELCOME_CODE"
        
        # Test static files
        echo "Testing static files:"
        STATIC_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.K8S_WORKER_IP }}:30080/themes/wowonder/stylesheet/style.css || echo "000")
        echo "Static File Code: $STATIC_CODE"

        if [ "$HTTP_CODE" != "000" ] || [ "$WELCOME_CODE" != "000" ]; then
          echo "‚úÖ Application is responding"
        else
          echo "‚ö† Application may not be fully responsive yet"
        fi

        echo "‚úÖ Application deployment completed"

    - name: Show final status
      run: |
        echo "=== üéâ FINAL DEPLOYMENT STATUS ==="
        echo ""
        echo "üìä CLUSTER STATUS:"
        kubectl get all -n ${{ env.NAMESPACE }}

        echo ""
        echo "üê≥ DEPLOYMENT STATUS:"
        kubectl get deployment wowonder-app -n ${{ env.NAMESPACE }} -o wide

        echo ""
        echo "üì¶ POD STATUS:"
        kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o wide

        echo ""
        echo "üåê APPLICATION URLS:"
        echo "   Main Site:      http://${{ env.K8S_WORKER_IP }}:30080/"
        echo "   Welcome Page:   http://${{ env.K8S_WORKER_IP }}:30080/welcome"
        echo "   Registration:   http://${{ env.K8S_WORKER_IP }}:30080/register"
        echo "   Login:          http://${{ env.K8S_WORKER_IP }}:30080/login"

        echo ""
        echo "üîß CONFIGURATION APPLIED:"
        echo "   ‚úì Correct port (30080) in config.php"
        echo "   ‚úì Database site URL updated"
        echo "   ‚úì Nginx redirect fixes applied"
        echo "   ‚úì auto_redirect = false"
        echo "   ‚úì PHP environment variables fixed"
        echo "   ‚úì Optimized deployment with better probes"

        echo ""
        echo "‚úÖ DEPLOYMENT COMPLETE - Application should be working!"
