name: Deploy Wowonder with Debug
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wowonder-laravel
  NAMESPACE: wowonder
  K8S_WORKER_IP: 44.220.139.238

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify required files exist
      run: |
        echo "=== Checking required files ==="
        ls -la
        echo "---"
        ls -la k8s/ || echo "k8s directory not found"
        echo "---"
        [ -f "Dockerfile" ] && echo "✓ Dockerfile exists" || echo "✗ Dockerfile missing"
        [ -f "nginx.conf" ] && echo "✓ nginx.conf exists" || echo "✗ nginx.conf missing"
        [ -f "supervisord.conf" ] && echo "✓ supervisord.conf exists" || echo "✗ supervisord.conf missing"
        [ -f "php.ini" ] && echo "✓ php.ini exists" || echo "✗ php.ini missing"
        [ -f "config.php" ] && echo "✓ config.php exists" || echo "✗ config.php missing"
        [ -f "wowonderdb.sql" ] && echo "✓ wowonderdb.sql exists" || echo "✗ wowonderdb.sql missing"

    - name: Fix config.php port
      run: |
        echo "=== Fixing config.php port ==="
        if [ -f "config.php" ]; then
          sed -i 's/:3008/:30080/g' config.php
          echo "Updated port from 3008 to 30080 in config.php"
          grep "site_url" config.php
        else
          echo "config.php not found, creating one..."
          cat > config.php << 'EOF'
<?php
$sql_db_host = "mysql-service";
$sql_db_user = "wowonderuser";
$sql_db_pass = "Password123@24";
$sql_db_name = "wowonderdb";
$site_url = "http://44.220.139.238:30080";
$auto_redirect = true;
$purchase_code = "000000";
$siteEncryptKey = "eb733cdb4d769426e460bad9df6b824eee3416d7";
?>
EOF
          echo "Created new config.php with correct port"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        kubectl config set-cluster kubernetes --server=https://54.159.42.214:6443 --insecure-skip-tls-verify=true
        
        echo "=== Cluster Info ==="
        kubectl get nodes -o wide
        kubectl cluster-info

    - name: Cleanup previous deployment
      run: |
        echo "=== Cleaning previous deployment ==="
        kubectl delete all --all -n ${{ env.NAMESPACE }} --ignore-not-found=true
        kubectl delete pvc -n ${{ env.NAMESPACE }} --all --ignore-not-found=true
        kubectl delete pv --all --ignore-not-found=true
        kubectl delete namespace ${{ env.NAMESPACE }} --ignore-not-found=true
        sleep 15

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        echo "Namespace ${{ env.NAMESPACE }} created"

    - name: Deploy storage
      run: |
        echo "=== Deploying Storage ==="
        kubectl apply -f k8s/storage.yaml
        sleep 10
        kubectl get pv,pvc -n ${{ env.NAMESPACE }} -o wide

    - name: Deploy MySQL
      run: |
        echo "=== Deploying MySQL ==="
        kubectl apply -f k8s/mysql.yaml
        
        echo "Waiting for MySQL pod..."
        timeout 180s bash -c '
          while true; do
            POD_STATUS=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].status.phase}" 2>/dev/null || echo "NotFound")
            if [ "$POD_STATUS" = "Running" ]; then
              echo "✓ MySQL pod is running"
              break
            elif [ "$POD_STATUS" = "NotFound" ]; then
              echo "⏳ MySQL pod not found yet..."
            else
              echo "⏳ MySQL pod status: $POD_STATUS"
            fi
            sleep 10
          done
        '
        
        echo "=== MySQL Pod Details ==="
        kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o wide
        MYSQL_POD=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        kubectl describe pod $MYSQL_POD -n ${{ env.NAMESPACE }}

    - name: Debug MySQL
      run: |
        echo "=== Debugging MySQL ==="
        MYSQL_POD=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$MYSQL_POD" != "NOT_FOUND" ]; then
          echo "MySQL Pod: $MYSQL_POD"
          
          # Check MySQL logs
          echo "=== MySQL Logs ==="
          kubectl logs $MYSQL_POD -n ${{ env.NAMESPACE }} --tail=50
          
          # Check pod events
          echo "=== MySQL Pod Events ==="
          kubectl get events -n ${{ env.NAMESPACE }} --field-selector involvedObject.name=$MYSQL_POD
        else
          echo "❌ MySQL pod not found"
          kubectl get all -n ${{ env.NAMESPACE }}
        fi

    - name: Initialize database
      run: |
        echo "=== Initializing Database ==="
        MYSQL_POD=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        
        # Wait for MySQL to be ready to accept connections
        echo "Waiting for MySQL to be ready..."
        timeout 120s bash -c '
          while ! kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysqladmin ping -h localhost -uroot -prootpassword --silent; do
            echo "⏳ MySQL not ready yet..."
            sleep 10
          done
          echo "✓ MySQL is ready"
        '
        
        # Create database and user
        echo "Creating database and user..."
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -h localhost -uroot -prootpassword -e "
          CREATE DATABASE IF NOT EXISTS wowonderdb;
          CREATE USER IF NOT EXISTS 'wowonderuser'@'%' IDENTIFIED BY 'Password123@24';
          GRANT ALL PRIVILEGES ON wowonderdb.* TO 'wowonderuser'@'%';
          FLUSH PRIVILEGES;
          SHOW DATABASES;
        " || echo "Database setup completed"
        
        # Import SQL file if exists
        if [ -f "wowonderdb.sql" ]; then
          echo "Importing database schema..."
          kubectl cp wowonderdb.sql ${{ env.NAMESPACE }}/$MYSQL_POD:/tmp/db.sql
          kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -h localhost -uroot -prootpassword wowonderdb < /tmp/db.sql && echo "✓ Database imported" || echo "⚠ Database import may have issues"
        else
          echo "ℹ No wowonderdb.sql file found, using existing database structure"
        fi

    - name: Deploy application
      run: |
        echo "=== Deploying Application ==="
        # Update image in deployment
        sed "s|\$DOCKER_IMAGE|${{ env.DOCKER_IMAGE }}|g" k8s/laravel.yaml | kubectl apply -f -
        
        echo "Waiting for application pod..."
        timeout 180s bash -c '
          while true; do
            POD_STATUS=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].status.phase}" 2>/dev/null || echo "NotFound")
            if [ "$POD_STATUS" = "Running" ]; then
              echo "✓ Application pod is running"
              break
            elif [ "$POD_STATUS" = "NotFound" ]; then
              echo "⏳ Application pod not found yet..."
            else
              echo "⏳ Application pod status: $POD_STATUS"
            fi
            sleep 10
          done
        '

    - name: Debug Application
      run: |
        echo "=== Debugging Application ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$APP_POD" != "NOT_FOUND" ]; then
          echo "Application Pod: $APP_POD"
          
          # Check pod details
          echo "=== Application Pod Details ==="
          kubectl describe pod $APP_POD -n ${{ env.NAMESPACE }}
          
          # Check application logs
          echo "=== Application Logs ==="
          kubectl logs $APP_POD -n ${{ env.NAMESPACE }} --tail=50
          
          # Check nginx logs
          echo "=== Nginx Error Logs ==="
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- cat /var/log/nginx/error.log 2>/dev/null || echo "No nginx error log found"
          
          # Check PHP-FPM logs
          echo "=== PHP-FPM Status ==="
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- ps aux 2>/dev/null | grep -E "(php-fpm|nginx)" || echo "Process check failed"
          
          # Check file structure
          echo "=== Application Files ==="
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- ls -la /var/www/html/ 2>/dev/null || echo "Cannot list files"
          
          # Check config.php
          echo "=== Config.php Content ==="
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- cat /var/www/html/config.php 2>/dev/null || echo "Cannot read config.php"
          
          # Check PHP syntax
          echo "=== PHP Syntax Check ==="
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- php -l /var/www/html/config.php 2>/dev/null || echo "Config.php syntax check failed"
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- php -l /var/www/html/index.php 2>/dev/null || echo "Index.php syntax check failed"
        else
          echo "❌ Application pod not found"
        fi

    - name: Test Database Connection from App
      run: |
        echo "=== Testing Database Connection from Application ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$APP_POD" != "NOT_FOUND" ]; then
          # Test if PHP can connect to MySQL
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- php -r "
          \$conn = new mysqli('mysql-service', 'wowonderuser', 'Password123@24', 'wowonderdb', 3306);
          if (\$conn->connect_error) {
              echo '❌ MySQL Connection Failed: ' . \$conn->connect_error;
              exit(1);
          } else {
              echo '✓ MySQL Connection Successful';
              \$result = \$conn->query('SHOW TABLES');
              if (\$result) {
                  echo '✓ Database tables query successful';
                  echo 'Number of tables: ' . \$result->num_rows;
              } else {
                  echo '⚠ No tables found or query failed';
              }
              \$conn->close();
          }
          " || echo "PHP database test failed"
        fi

    - name: Fix Configuration Files
      run: |
        echo "=== Fixing Configuration Files ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "NOT_FOUND")
        
        if [ "$APP_POD" != "NOT_FOUND" ]; then
          # Create proper config.php with correct port
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "cat > /var/www/html/config.php" << 'EOF'
<?php
\$sql_db_host = "mysql-service";
\$sql_db_user = "wowonderuser";
\$sql_db_pass = "Password123@24";
\$sql_db_name = "wowonderdb";
\$site_url = "http://44.220.139.238:30080";
\$auto_redirect = true;
\$purchase_code = "000000";
\$siteEncryptKey = "eb733cdb4d769426e460bad9df6b824eee3416d7";
?>
EOF
          
          # Set proper permissions
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chown www-data:www-data /var/www/html/config.php
          kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chmod 644 /var/www/html/config.php
          
          echo "✓ Configuration files updated"
        fi

    - name: Verify Services
      run: |
        echo "=== Verifying Services ==="
        echo "--- All Resources ---"
        kubectl get all -n ${{ env.NAMESPACE }} -o wide
        
        echo "--- Storage ---"
        kubectl get pv,pvc -n ${{ env.NAMESPACE }} -o wide
        
        echo "--- Services ---"
        kubectl get svc -n ${{ env.NAMESPACE }} -o wide
        
        echo "--- Endpoints ---"
        kubectl get endpoints -n ${{ env.NAMESPACE }}

    - name: Test Application Endpoints
      run: |
        echo "=== Testing Application Endpoints ==="
        echo "Waiting for application to be fully ready..."
        sleep 30
        
        echo "--- Testing Basic Connectivity ---"
        curl -v -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://${{ env.K8S_WORKER_IP }}:30080/ || echo "❌ Root endpoint failed"
        
        echo "--- Testing Welcome Page ---"
        curl -v -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://${{ env.K8S_WORKER_IP }}:30080/welcome || echo "❌ Welcome page failed"
        
        echo "--- Testing Static Files ---"
        curl -v -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://${{ env.K8S_WORKER_IP }}:30080/themes/wowonder/css/style.css || echo "❌ CSS file failed"
        
        echo "--- Testing PHP Info ---"
        curl -v -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://${{ env.K8S_WORKER_IP }}:30080/index.php || echo "❌ PHP failed"

    - name: Final Status Report
      run: |
        echo "=== 🎉 DEPLOYMENT COMPLETE ==="
        echo ""
        echo "🌐 APPLICATION URLS:"
        echo "   Main Site:      http://${{ env.K8S_WORKER_IP }}:30080/"
        echo "   Welcome Page:   http://${{ env.K8S_WORKER_IP }}:30080/welcome"
        echo "   Registration:   http://${{ env.K8S_WORKER_IP }}:30080/register"
        echo "   Login:          http://${{ env.K8S_WORKER_IP }}:30080/login"
        echo ""
        echo "🔧 TROUBLESHOOTING:"
        echo "   If you get HTTP 500 errors, check the application logs above"
        echo "   Verify MySQL connection is working"
        echo "   Check that config.php has the correct port (30080)"
        echo ""
        echo "📊 DEPLOYMENT STATUS:"
        kubectl get pods -n ${{ env.NAMESPACE }} -o wide
