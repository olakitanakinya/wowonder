name: Deploy Wowonder

concurrency:
  group: deploy-wowonder
  cancel-in-progress: true

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/wowonder-laravel
  NAMESPACE: wowonder
  K8S_WORKER_IP: 44.220.139.238

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Fix config.php port and redirect
      run: |
        echo "=== Fixing config.php ==="
        # Ensure auto_redirect is false and correct port
        sed -i 's/\$auto_redirect = true;/\$auto_redirect = false;/g' config.php
        sed -i 's/:3008/:30080/g' config.php
        sed -i 's/:300800/:30080/g' config.php
        echo "✓ Fixed config.php"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        kubectl config set-cluster kubernetes --server=https://54.159.42.214:6443 --insecure-skip-tls-verify=true
        kubectl get nodes

    - name: Cleanup previous deployment
      run: |
        echo "=== Cleaning previous deployment ==="
        kubectl delete all --all -n ${{ env.NAMESPACE }} --ignore-not-found=true
        kubectl delete pvc -n ${{ env.NAMESPACE }} --all --ignore-not-found=true
        kubectl delete pv --all --ignore-not-found=true
        kubectl delete namespace ${{ env.NAMESPACE }} --ignore-not-found=true
        sleep 10

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }}
        echo "Namespace ${{ env.NAMESPACE }} created"

    - name: Setup storage directories
      run: |
        echo "=== Setting up storage directories on worker node ==="
        sudo mkdir -p /mnt/data/mysql /mnt/data/wowonder
        sudo chmod -R 777 /mnt/data
        echo "Storage directories created:"
        ls -la /mnt/data/

    - name: Deploy storage
      run: |
        echo "=== Deploying Storage ==="
        kubectl apply -f k8s/storage.yaml
        sleep 15
        echo "=== Storage Status ==="
        kubectl get pv,pvc -n ${{ env.NAMESPACE }} -o wide

    - name: Wait for storage to be ready
      run: |
        echo "=== Waiting for storage to be ready ==="
        timeout 60s bash -c '
          while true; do
            MYSQL_PVC_STATUS=$(kubectl get pvc mysql-pvc -n ${{ env.NAMESPACE }} -o jsonpath="{.status.phase}" 2>/dev/null || echo "Pending")
            WOWONDER_PVC_STATUS=$(kubectl get pvc wowonder-pvc -n ${{ env.NAMESPACE }} -o jsonpath="{.status.phase}" 2>/dev/null || echo "Pending")
            
            echo "MySQL PVC: $MYSQL_PVC_STATUS, Wowonder PVC: $WOWONDER_PVC_STATUS"
            
            if [ "$MYSQL_PVC_STATUS" = "Bound" ] && [ "$WOWONDER_PVC_STATUS" = "Bound" ]; then
              echo "✓ Both PVCs are bound"
              break
            fi
            sleep 5
          done
        '

    - name: Deploy Nginx ConfigMap with redirect fixes
      run: |
        echo "=== Deploying Nginx ConfigMap with Redirect Fixes ==="
        kubectl apply -f - << "NGINX"
apiVersion: v1
kind: ConfigMap
metadata:
  name: wowonder-nginx-config
  namespace: ${{ env.NAMESPACE }}
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        root /var/www/html;
        index index.php index.html;

        client_max_body_size 2024M;
        client_body_timeout 5000s;
        fastcgi_read_timeout 4000s;
        fastcgi_send_timeout 4000s;

        # CRITICAL: Prevent redirect loops
        port_in_redirect off;
        server_name_in_redirect off;
        absolute_redirect off;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|mp4|webm|ogg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri $uri/ =404;
        }

        location /upload/ {
            alias /var/www/html/upload/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri $uri/ =404;
        }

        location /assets/ {
            alias /var/www/html/assets/;
            expires 1y;
            add_header Cache-Control "public";
            try_files $uri $uri/ =404;
        }

        location /themes/ {
            alias /var/www/html/themes/;
            expires 1y;
            add_header Cache-Control "public";
            try_files $uri $uri/ =404;
        }

        location /admin-panel/ {
            alias /var/www/html/admin-panel/;
            try_files $uri $uri/ /admin-panel/index.php?$query_string;
        }

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            
            # CRITICAL: Prevent redirect loops in PHP
            fastcgi_param HTTPS off;
            fastcgi_param HTTP_X_FORWARDED_PROTO http;
            fastcgi_param SERVER_PORT 80;
            fastcgi_param SERVER_NAME 44.220.139.238;
        }

        location ~ /\.ht {
            deny all;
        }
    }
NGINX
        echo "✓ Nginx ConfigMap deployed with redirect fixes"

    - name: Deploy MySQL
      run: |
        echo "=== Deploying MySQL ==="
        kubectl apply -f k8s/mysql.yaml
        kubectl wait --for=condition=ready pod -l app=mysql -n ${{ env.NAMESPACE }} --timeout=300s
        echo "✅ MySQL is ready"

    - name: Initialize database
      run: |
        echo "=== Initializing Database ==="
        MYSQL_POD=$(kubectl get pods -l app=mysql -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        
        # Wait for MySQL to accept connections
        timeout 120s bash -c "
          while ! kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysqladmin ping -uroot -prootpassword --silent; do
            echo 'Waiting for MySQL connections...'
            sleep 10
          done
        "
        
        # Create database and user
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "CREATE DATABASE IF NOT EXISTS wowonderdb;"
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "CREATE USER IF NOT EXISTS 'wowonderuser'@'%' IDENTIFIED BY 'Password123@24';"
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "GRANT ALL PRIVILEGES ON wowonderdb.* TO 'wowonderuser'@'%';"
        kubectl exec -n ${{ env.NAMESPACE }} $MYSQL_POD -- mysql -uroot -prootpassword -e "FLUSH PRIVILEGES;"
        
        echo "✅ Database initialized"

    - name: Create deployment file with nginx config
      run: |
        echo "=== Creating Deployment File ==="
        mkdir -p k8s
        cat > k8s/deployment.yaml << 'DEPLOY'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wowonder-app
  namespace: wowonder
  labels:
    app: wowonder-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wowonder-app
  template:
    metadata:
      labels:
        app: wowonder-app
    spec:
      containers:
      - name: wowonder-app
        image: ${{ env.DOCKER_IMAGE }}:latest
        ports:
        - containerPort: 80
        env:
        - name: MYSQL_HOST
          value: "mysql-service"
        - name: MYSQL_DATABASE
          value: "wowonderdb"
        - name: MYSQL_USER
          value: "wowonderuser"
        - name: MYSQL_PASSWORD
          value: "Password123@24"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: wowonder-data
          mountPath: /var/www/html/upload
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 90
          periodSeconds: 30
      volumes:
      - name: wowonder-data
        persistentVolumeClaim:
          claimName: wowonder-pvc
      - name: nginx-config
        configMap:
          name: wowonder-nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: wowonder-service
  namespace: wowonder
spec:
  type: NodePort
  selector:
    app: wowonder-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
DEPLOY
        echo "✅ Deployment file created"

    - name: Deploy application
      run: |
        echo "=== Deploying Application ==="
        kubectl apply -f k8s/deployment.yaml
        kubectl wait --for=condition=available deployment/wowonder-app -n ${{ env.NAMESPACE }} --timeout=300s
        echo "✅ Application deployed"

    - name: Configure application
      run: |
        echo "=== Configuring Application ==="
        APP_POD=$(kubectl get pods -l app=wowonder-app -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}')
        
        # Create config.php with auto_redirect = false
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- sh -c "cat > /var/www/html/config.php" << 'CONFIG'
<?php
\$sql_db_host = "mysql-service";
\$sql_db_user = "wowonderuser";
\$sql_db_pass = "Password123@24";
\$sql_db_name = "wowonderdb";
\$site_url = "http://44.220.139.238:30080";
\$auto_redirect = false;
\$purchase_code = "000000";
\$siteEncryptKey = "eb733cdb4d769426e460bad9df6b824eee3416d7";
?>
CONFIG
        
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chown www-data:www-data /var/www/html/config.php
        kubectl exec -n ${{ env.NAMESPACE }} $APP_POD -- chmod 644 /var/www/html/config.php
        
        echo "✅ Application configured"

    - name: Verify deployment
      run: |
        echo "=== Verifying Deployment ==="
        kubectl get pods -n ${{ env.NAMESPACE }}
        echo "Application URL: http://${{ env.K8S_WORKER_IP }}:30080/"
        echo "✅ DEPLOYMENT COMPLETE"
